{"version":3,"sources":["App.js","Scripts/utils.js","index.js"],"names":["Sect","styled","section","props","color","App","useState","currentScreen","setScreen","setData","useEffect","screen","currenPosition","window","scrollY","windowHeight","innerHeight","startTime","Date","now","distance","console","log","smoothScrollTo","a","b","t","elapsedTime","percentTime","scrollTo","requestAnimationFrame","screenHandler","dataHandler","lol","dataFetcher","className","onClick","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"wRAKA,IAAMA,E,KAAOC,EAAOC,QAAV,KACY,SAAAC,GAAK,OAAIA,EAAMC,OAAS,YA6C/BC,MAzCf,WAAgB,IAAD,EAEsBC,mBAAS,GAF/B,mBAENC,EAFM,KAESC,EAFT,OAGcF,mBAAS,MAHvB,mBAGGG,GAHH,WAeb,OARAC,qBAAU,WACJH,EAAgB,ECVjB,SAAuBI,GAO1B,IAAMC,EAAiBC,OAAOC,QACxBC,EAAeF,OAAOG,YAEtBC,EAAYC,KAAKC,MAEjBC,EADcT,EAASI,EACEH,EAE/BS,QAAQC,IAAIF,GAGZ,SAASG,IAEL,IAYaC,EAAEC,EAIDC,EAfRC,EADcT,KAAKC,MACSF,EAC5BW,EAAcD,EAZP,IAcTA,EAdS,KAeTd,OAAOgB,SAAS,EAAGjB,EAAkBQ,IAO5BI,EAP2C,IAOzCC,GAIDC,EAXkDE,GAYjDF,GAJIF,EAAIC,IAPnBZ,OAAOiB,sBAAsBP,IAG7BV,OAAOgB,SAAS,EAAGd,EAAeJ,GAb1CY,GDJEQ,CAAcxB,GCnBb,SAAqByB,EAAaD,GAIrCC,EAAY,CAACC,IAAK,QAClBF,EAAc,GDgBZG,CAAYzB,EAASD,MAKvB,sBAAK2B,UAAU,MAAf,UACE,eAACnC,EAAD,WACE,0CACA,wBAAQoC,QAAS,kBAAM5B,EAAU,IAAjC,sBAEF,eAACR,EAAD,WACE,wCACA,wBAAQoC,QAAS,kBAAM5B,EAAU,IAAjC,qBAEF,eAACR,EAAD,WACE,wCACA,wBAAQoC,QAAS,kBAAM5B,EAAU,IAAjC,gBACA,wBAAQ4B,QAAS,kBAAM5B,EAAU,IAAjC,qBAEF,cAACR,EAAD,UACE,gDEpCRqC,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,W","file":"static/js/main.9a159ba5.chunk.js","sourcesContent":["import styled from \"styled-components\";\nimport { useEffect, useState } from \"react\";\nimport HookCounter from \"./components/HookCounter\";\nimport {screenHandler, dataFetcher} from \"./Scripts/utils\";\n\nconst Sect = styled.section`\n  background-color: ${props => props.color || \"orange\"};\n  height: 100vh;\n`\n\nfunction App() {\n  \n  const [currentScreen, setScreen] = useState(0);\n  const [apiData, setData] = useState(null);\n\n\n  \n  useEffect(() => {\n    if (currentScreen > 0) {\n      screenHandler(currentScreen);\n    } else {\n      dataFetcher(setData, setScreen);\n    }\n    \n  });\n  return (\n    <div className=\"App\">\n      <Sect>\n        <p>Preloader</p>\n        <button onClick={() => setScreen(1)}>Click</button>\n      </Sect>\n      <Sect>\n        <p>Hottest</p>\n        <button onClick={() => setScreen(2)}>Down</button>\n      </Sect>\n      <Sect>\n        <p>Content</p>\n        <button onClick={() => setScreen(1)}>Up</button>\n        <button onClick={() => setScreen(3)}>Down</button>\n      </Sect>\n      <Sect>\n        <p>Signature</p>\n      </Sect>\n\n    </div>\n   \n\n  );\n}\n\n\nexport default App;\n","export function dataFetcher(dataHandler, screenHandler){\n    \n    \n    \n    dataHandler({lol: \"kek\"});\n    screenHandler(1);\n}\n\nexport function screenHandler(screen){\n    /*\n    \n    This function is reponsible for smooth scroll between different components of the application\n\n    */\n    \n    const currenPosition = window.scrollY;\n    const windowHeight = window.innerHeight;\n    const duration = 1000;\n    const startTime = Date.now();\n    const endPosition = screen * windowHeight;\n    const distance = endPosition - currenPosition;\n\n    console.log(distance);\n    smoothScrollTo();\n    \n    function smoothScrollTo(){\n        \n        const currentTime = Date.now();\n        const elapsedTime = currentTime - startTime;\n        const percentTime = elapsedTime / duration;\n\n        if (elapsedTime < duration) {\n            window.scrollTo(0, currenPosition + (distance * min(1, ease(percentTime))));\n            window.requestAnimationFrame(smoothScrollTo);\n\n        } else {\n            window.scrollTo(0, windowHeight * screen);\n        }\n\n        function min(a,b){\n            return a < b ? a : b;\n        }\n\n        function ease(t){\n            return t * t;\n        }\n        \n    }\n}\n\n\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\n\n"],"sourceRoot":""}